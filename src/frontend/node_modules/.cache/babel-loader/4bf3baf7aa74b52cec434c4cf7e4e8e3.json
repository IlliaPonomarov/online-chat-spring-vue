{"ast":null,"code":"require(\"core-js/modules/es.error.cause.js\");\n\nrequire(\"core-js/modules/es.typed-array.at.js\");\n\nrequire(\"core-js/modules/esnext.typed-array.find-last.js\");\n\nrequire(\"core-js/modules/esnext.typed-array.find-last-index.js\");\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : global.webstomp = factory();\n})(this, function () {\n  'use strict';\n\n  var classCallCheck = function (instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  };\n\n  var createClass = function () {\n    function defineProperties(target, props) {\n      for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n      }\n    }\n\n    return function (Constructor, protoProps, staticProps) {\n      if (protoProps) defineProperties(Constructor.prototype, protoProps);\n      if (staticProps) defineProperties(Constructor, staticProps);\n      return Constructor;\n    };\n  }();\n\n  var slicedToArray = function () {\n    function sliceIterator(arr, i) {\n      var _arr = [];\n      var _n = true;\n      var _d = false;\n      var _e = undefined;\n\n      try {\n        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n          _arr.push(_s.value);\n\n          if (i && _arr.length === i) break;\n        }\n      } catch (err) {\n        _d = true;\n        _e = err;\n      } finally {\n        try {\n          if (!_n && _i[\"return\"]) _i[\"return\"]();\n        } finally {\n          if (_d) throw _e;\n        }\n      }\n\n      return _arr;\n    }\n\n    return function (arr, i) {\n      if (Array.isArray(arr)) {\n        return arr;\n      } else if (Symbol.iterator in Object(arr)) {\n        return sliceIterator(arr, i);\n      } else {\n        throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n      }\n    };\n  }();\n\n  var toConsumableArray = function (arr) {\n    if (Array.isArray(arr)) {\n      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n      return arr2;\n    } else {\n      return Array.from(arr);\n    }\n  };\n\n  var VERSIONS = {\n    V1_0: '1.0',\n    V1_1: '1.1',\n    V1_2: '1.2',\n    // Versions of STOMP specifications supported\n    supportedVersions: function supportedVersions() {\n      return '1.2,1.1,1.0';\n    },\n    supportedProtocols: function supportedProtocols() {\n      return ['v10.stomp', 'v11.stomp', 'v12.stomp'];\n    }\n  };\n  var PROTOCOLS_VERSIONS = {\n    'v10.stomp': VERSIONS.V1_0,\n    'v11.stomp': VERSIONS.V1_1,\n    'v12.stomp': VERSIONS.V1_2\n  };\n\n  function getSupportedVersion(protocol, debug) {\n    var knownVersion = PROTOCOLS_VERSIONS[protocol];\n\n    if (!knownVersion && debug) {\n      debug('DEPRECATED: ' + protocol + ' is not a recognized STOMP version. In next major client version, this will close the connection.');\n    } // 2nd temporary fallback if the protocol\n    // does not match a supported STOMP version\n    // This fallback will be removed in next major version\n\n\n    return knownVersion || VERSIONS.V1_2;\n  } // Define constants for bytes used throughout the code.\n\n\n  var BYTES = {\n    // LINEFEED byte (octet 10)\n    LF: '\\x0A',\n    // NULL byte (octet 0)\n    NULL: '\\x00'\n  }; // utility function to trim any whitespace before and after a string\n\n  var trim = function trim(str) {\n    return str.replace(/^\\s+|\\s+$/g, '');\n  }; // from https://coolaj86.com/articles/unicode-string-to-a-utf-8-typed-array-buffer-in-javascript/\n\n\n  function unicodeStringToTypedArray(s) {\n    var escstr = encodeURIComponent(s);\n    var binstr = escstr.replace(/%([0-9A-F]{2})/g, function (match, p1) {\n      return String.fromCharCode('0x' + p1);\n    });\n    var arr = Array.prototype.map.call(binstr, function (c) {\n      return c.charCodeAt(0);\n    });\n    return new Uint8Array(arr);\n  } // from https://coolaj86.com/articles/unicode-string-to-a-utf-8-typed-array-buffer-in-javascript/\n\n\n  function typedArrayToUnicodeString(ua) {\n    var binstr = String.fromCharCode.apply(String, toConsumableArray(ua));\n    var escstr = binstr.replace(/(.)/g, function (m, p) {\n      var code = p.charCodeAt(0).toString(16).toUpperCase();\n\n      if (code.length < 2) {\n        code = '0' + code;\n      }\n\n      return '%' + code;\n    });\n    return decodeURIComponent(escstr);\n  } // Compute the size of a UTF-8 string by counting its number of bytes\n  // (and not the number of characters composing the string)\n\n\n  function sizeOfUTF8(s) {\n    if (!s) return 0;\n    return encodeURIComponent(s).match(/%..|./g).length;\n  }\n\n  function createId() {\n    var ts = new Date().getTime();\n    var rand = Math.floor(Math.random() * 1000);\n    return ts + '-' + rand;\n  } // [STOMP Frame](http://stomp.github.com/stomp-specification-1.1.html#STOMP_Frames) Class\n\n\n  var Frame = function () {\n    // Frame constructor\n    function Frame(command) {\n      var headers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var body = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n      classCallCheck(this, Frame);\n      this.command = command;\n      this.headers = headers;\n      this.body = body;\n    } // Provides a textual representation of the frame\n    // suitable to be sent to the server\n\n\n    createClass(Frame, [{\n      key: 'toString',\n      value: function toString() {\n        var _this = this;\n\n        var lines = [this.command],\n            skipContentLength = this.headers['content-length'] === false;\n        if (skipContentLength) delete this.headers['content-length'];\n        Object.keys(this.headers).forEach(function (name) {\n          var value = _this.headers[name];\n          lines.push(name + ':' + value);\n        });\n\n        if (this.body && !skipContentLength) {\n          lines.push('content-length:' + sizeOfUTF8(this.body));\n        }\n\n        lines.push(BYTES.LF + this.body);\n        return lines.join(BYTES.LF);\n      } // Unmarshall a single STOMP frame from a `data` string\n\n    }], [{\n      key: 'unmarshallSingle',\n      value: function unmarshallSingle(data) {\n        // search for 2 consecutives LF byte to split the command\n        // and headers from the body\n        var divider = data.search(new RegExp(BYTES.LF + BYTES.LF)),\n            headerLines = data.substring(0, divider).split(BYTES.LF),\n            command = headerLines.shift(),\n            headers = {},\n            body = '',\n            // skip the 2 LF bytes that divides the headers from the body\n        bodyIndex = divider + 2; // Parse headers in reverse order so that for repeated headers, the 1st\n        // value is used\n\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = headerLines.reverse()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var line = _step.value;\n            var idx = line.indexOf(':');\n            headers[trim(line.substring(0, idx))] = trim(line.substring(idx + 1));\n          } // Parse body\n          // check for content-length or topping at the first NULL byte found.\n\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n\n        if (headers['content-length']) {\n          var len = parseInt(headers['content-length'], 10);\n          body = ('' + data).substring(bodyIndex, bodyIndex + len);\n        } else {\n          var chr = null;\n\n          for (var i = bodyIndex; i < data.length; i++) {\n            chr = data.charAt(i);\n            if (chr === BYTES.NULL) break;\n            body += chr;\n          }\n        }\n\n        return new Frame(command, headers, body);\n      } // Split the data before unmarshalling every single STOMP frame.\n      // Web socket servers can send multiple frames in a single websocket message.\n      // If the message size exceeds the websocket message size, then a single\n      // frame can be fragmented across multiple messages.\n      //\n      // `datas` is a string.\n      //\n      // returns an *array* of Frame objects\n\n    }, {\n      key: 'unmarshall',\n      value: function unmarshall(datas) {\n        // split and unmarshall *multiple STOMP frames* contained in a *single WebSocket frame*.\n        // The data is split when a NULL byte (followed by zero or many LF bytes) is found\n        var frames = datas.split(new RegExp(BYTES.NULL + BYTES.LF + '*')),\n            firstFrames = frames.slice(0, -1),\n            lastFrame = frames.slice(-1)[0],\n            r = {\n          frames: firstFrames.map(function (f) {\n            return Frame.unmarshallSingle(f);\n          }),\n          partial: ''\n        }; // If this contains a final full message or just a acknowledgement of a PING\n        // without any other content, process this frame, otherwise return the\n        // contents of the buffer to the caller.\n\n        if (lastFrame === BYTES.LF || lastFrame.search(RegExp(BYTES.NULL + BYTES.LF + '*$')) !== -1) {\n          r.frames.push(Frame.unmarshallSingle(lastFrame));\n        } else {\n          r.partial = lastFrame;\n        }\n\n        return r;\n      } // Marshall a Stomp frame\n\n    }, {\n      key: 'marshall',\n      value: function marshall(command, headers, body) {\n        var frame = new Frame(command, headers, body);\n        return frame.toString() + BYTES.NULL;\n      }\n    }]);\n    return Frame;\n  }(); // STOMP Client Class\n  //\n  // All STOMP protocol is exposed as methods of this class (`connect()`,\n  // `send()`, etc.)\n\n\n  var Client = function () {\n    function Client(ws) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      classCallCheck(this, Client); // cannot have default options object + destructuring in the same time in method signature\n\n      var _options$binary = options.binary,\n          binary = _options$binary === undefined ? false : _options$binary,\n          _options$heartbeat = options.heartbeat,\n          heartbeat = _options$heartbeat === undefined ? {\n        outgoing: 10000,\n        incoming: 10000\n      } : _options$heartbeat,\n          _options$debug = options.debug,\n          debug = _options$debug === undefined ? true : _options$debug,\n          _options$protocols = options.protocols,\n          protocols = _options$protocols === undefined ? [] : _options$protocols;\n      this.ws = ws;\n      this.ws.binaryType = 'arraybuffer';\n      this.isBinary = !!binary;\n      this.hasDebug = !!debug;\n      this.connected = false; // Heartbeat properties of the client\n      // outgoing: send heartbeat every 10s by default (value is in ms)\n      // incoming: expect to receive server heartbeat at least every 10s by default\n      // falsy value means no heartbeat hence 0,0\n\n      this.heartbeat = heartbeat || {\n        outgoing: 0,\n        incoming: 0\n      }; // maximum *WebSocket* frame size sent by the client. If the STOMP frame\n      // is bigger than this value, the STOMP frame will be sent using multiple\n      // WebSocket frames (default is 16KiB)\n\n      this.maxWebSocketFrameSize = 16 * 1024; // subscription callbacks indexed by subscriber's ID\n\n      this.subscriptions = {};\n      this.partialData = '';\n      this.protocols = protocols;\n    } // //// Debugging\n    //\n    // By default, debug messages are logged in the window's console if it is defined.\n    // This method is called for every actual transmission of the STOMP frames over the\n    // WebSocket.\n    //\n    // It is possible to set a `debug(message, data)` method\n    // on a client instance to handle differently the debug messages:\n    //\n    //     client.debug = function(str) {\n    //         // append the debug log to a #debug div\n    //         $(\"#debug\").append(str + \"\\n\");\n    //     };\n\n\n    createClass(Client, [{\n      key: 'debug',\n      value: function debug() {\n        var _console;\n\n        if (this.hasDebug) (_console = console).log.apply(_console, arguments);\n      } // [CONNECT Frame](http://stomp.github.com/stomp-specification-1.1.html#CONNECT_or_STOMP_Frame)\n      //\n      // The `connect` method accepts different number of arguments and types:\n      //\n      // * `connect(headers, connectCallback)`\n      // * `connect(headers, connectCallback, errorCallback)`\n      // * `connect(login, passcode, connectCallback)`\n      // * `connect(login, passcode, connectCallback, errorCallback)`\n      // * `connect(login, passcode, connectCallback, errorCallback, host)`\n      //\n      // The errorCallback is optional and the 2 first forms allow to pass other\n      // headers in addition to `client`, `passcode` and `host`.\n\n    }, {\n      key: 'connect',\n      value: function connect() {\n        var _this = this;\n\n        var _parseConnect2 = this._parseConnect.apply(this, arguments),\n            _parseConnect3 = slicedToArray(_parseConnect2, 3),\n            headers = _parseConnect3[0],\n            connectCallback = _parseConnect3[1],\n            errorCallback = _parseConnect3[2];\n\n        this.connectCallback = connectCallback;\n        this.debug('Opening Web Socket...');\n\n        this.ws.onmessage = function (evt) {\n          var data = evt.data;\n\n          if (evt.data instanceof ArrayBuffer) {\n            data = typedArrayToUnicodeString(new Uint8Array(evt.data));\n          }\n\n          _this.serverActivity = Date.now(); // heartbeat\n\n          if (data === BYTES.LF) {\n            _this.debug('<<< PONG');\n\n            return;\n          }\n\n          _this.debug('<<< ' + data); // Handle STOMP frames received from the server\n          // The unmarshall function returns the frames parsed and any remaining\n          // data from partial frames.\n\n\n          var unmarshalledData = Frame.unmarshall(_this.partialData + data);\n          _this.partialData = unmarshalledData.partial;\n          unmarshalledData.frames.forEach(function (frame) {\n            switch (frame.command) {\n              // [CONNECTED Frame](http://stomp.github.com/stomp-specification-1.1.html#CONNECTED_Frame)\n              case 'CONNECTED':\n                _this.debug('connected to server ' + frame.headers.server);\n\n                _this.connected = true;\n                _this.version = frame.headers.version;\n\n                _this._setupHeartbeat(frame.headers);\n\n                if (connectCallback) connectCallback(frame);\n                break;\n              // [MESSAGE Frame](http://stomp.github.com/stomp-specification-1.1.html#MESSAGE)\n\n              case 'MESSAGE':\n                // the `onreceive` callback is registered when the client calls\n                // `subscribe()`.\n                // If there is registered subscription for the received message,\n                // we used the default `onreceive` method that the client can set.\n                // This is useful for subscriptions that are automatically created\n                // on the browser side (e.g. [RabbitMQ's temporary\n                // queues](http://www.rabbitmq.com/stomp.html)).\n                var subscription = frame.headers.subscription;\n                var onreceive = _this.subscriptions[subscription] || _this.onreceive;\n\n                if (onreceive) {\n                  // 1.2 define ack header if ack is set to client\n                  // and this header must be used for ack/nack\n                  var messageID = _this.version === VERSIONS.V1_2 && frame.headers.ack || frame.headers['message-id']; // add `ack()` and `nack()` methods directly to the returned frame\n                  // so that a simple call to `message.ack()` can acknowledge the message.\n\n                  frame.ack = _this.ack.bind(_this, messageID, subscription);\n                  frame.nack = _this.nack.bind(_this, messageID, subscription);\n                  onreceive(frame);\n                } else {\n                  _this.debug('Unhandled received MESSAGE: ' + frame);\n                }\n\n                break;\n              // [RECEIPT Frame](http://stomp.github.com/stomp-specification-1.1.html#RECEIPT)\n              //\n              // The client instance can set its `onreceipt` field to a function taking\n              // a frame argument that will be called when a receipt is received from\n              // the server:\n              //\n              //     client.onreceipt = function(frame) {\n              //       receiptID = frame.headers['receipt-id'];\n              //       ...\n              //     }\n\n              case 'RECEIPT':\n                if (_this.onreceipt) _this.onreceipt(frame);\n                break;\n              // [ERROR Frame](http://stomp.github.com/stomp-specification-1.1.html#ERROR)\n\n              case 'ERROR':\n                if (errorCallback) errorCallback(frame);\n                break;\n\n              default:\n                _this.debug('Unhandled frame: ' + frame);\n\n            }\n          });\n        };\n\n        this.ws.onclose = function (event) {\n          _this.debug('Whoops! Lost connection to ' + _this.ws.url + ':', {\n            event: event\n          });\n\n          _this._cleanUp();\n\n          if (errorCallback) errorCallback(event);\n        };\n\n        this.ws.onopen = function () {\n          _this.debug('Web Socket Opened...'); // 1st protocol fallback on user 1st protocols options\n          // to prevent edge case where server does not comply and respond with a choosen protocol\n          // or when ws client does not handle protocol property very well\n\n\n          headers['accept-version'] = getSupportedVersion(_this.ws.protocol || _this.protocols[0], _this.debug.bind(_this)); // Check if we already have heart-beat in headers before adding them\n\n          if (!headers['heart-beat']) {\n            headers['heart-beat'] = [_this.heartbeat.outgoing, _this.heartbeat.incoming].join(',');\n          }\n\n          _this._transmit('CONNECT', headers);\n        };\n\n        if (this.ws.readyState === this.ws.OPEN) {\n          this.ws.onopen();\n        }\n      } // [DISCONNECT Frame](http://stomp.github.com/stomp-specification-1.1.html#DISCONNECT)\n\n    }, {\n      key: 'disconnect',\n      value: function disconnect(disconnectCallback) {\n        var headers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n        this._transmit('DISCONNECT', headers); // Discard the onclose callback to avoid calling the errorCallback when\n        // the client is properly disconnected.\n\n\n        this.ws.onclose = null;\n        this.ws.close();\n\n        this._cleanUp(); // TODO: what's the point of this callback disconnect is not async\n\n\n        if (disconnectCallback) disconnectCallback();\n      } // [SEND Frame](http://stomp.github.com/stomp-specification-1.1.html#SEND)\n      //\n      // * `destination` is MANDATORY.\n\n    }, {\n      key: 'send',\n      value: function send(destination) {\n        var body = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n        var headers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        var hdrs = Object.assign({}, headers);\n        hdrs.destination = destination;\n\n        this._transmit('SEND', hdrs, body);\n      } // [BEGIN Frame](http://stomp.github.com/stomp-specification-1.1.html#BEGIN)\n      //\n      // If no transaction ID is passed, one will be created automatically\n\n    }, {\n      key: 'begin',\n      value: function begin() {\n        var transaction = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'tx-' + createId();\n\n        this._transmit('BEGIN', {\n          transaction: transaction\n        });\n\n        return {\n          id: transaction,\n          commit: this.commit.bind(this, transaction),\n          abort: this.abort.bind(this, transaction)\n        };\n      } // [COMMIT Frame](http://stomp.github.com/stomp-specification-1.1.html#COMMIT)\n      //\n      // * `transaction` is MANDATORY.\n      //\n      // It is preferable to commit a transaction by calling `commit()` directly on\n      // the object returned by `client.begin()`:\n      //\n      //     var tx = client.begin(txid);\n      //     ...\n      //     tx.commit();\n\n    }, {\n      key: 'commit',\n      value: function commit(transaction) {\n        this._transmit('COMMIT', {\n          transaction: transaction\n        });\n      } // [ABORT Frame](http://stomp.github.com/stomp-specification-1.1.html#ABORT)\n      //\n      // * `transaction` is MANDATORY.\n      //\n      // It is preferable to abort a transaction by calling `abort()` directly on\n      // the object returned by `client.begin()`:\n      //\n      //     var tx = client.begin(txid);\n      //     ...\n      //     tx.abort();\n\n    }, {\n      key: 'abort',\n      value: function abort(transaction) {\n        this._transmit('ABORT', {\n          transaction: transaction\n        });\n      } // [ACK Frame](http://stomp.github.com/stomp-specification-1.1.html#ACK)\n      //\n      // * `messageID` & `subscription` are MANDATORY.\n      //\n      // It is preferable to acknowledge a message by calling `ack()` directly\n      // on the message handled by a subscription callback:\n      //\n      //     client.subscribe(destination,\n      //       function(message) {\n      //         // process the message\n      //         // acknowledge it\n      //         message.ack();\n      //       },\n      //       {'ack': 'client'}\n      //     );\n\n    }, {\n      key: 'ack',\n      value: function ack(messageID, subscription) {\n        var headers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        var hdrs = Object.assign({}, headers); // 1.2 change id header name from message-id to id\n\n        var idAttr = this.version === VERSIONS.V1_2 ? 'id' : 'message-id';\n        hdrs[idAttr] = messageID;\n        hdrs.subscription = subscription;\n\n        this._transmit('ACK', hdrs);\n      } // [NACK Frame](http://stomp.github.com/stomp-specification-1.1.html#NACK)\n      //\n      // * `messageID` & `subscription` are MANDATORY.\n      //\n      // It is preferable to nack a message by calling `nack()` directly on the\n      // message handled by a subscription callback:\n      //\n      //     client.subscribe(destination,\n      //       function(message) {\n      //         // process the message\n      //         // an error occurs, nack it\n      //         message.nack();\n      //       },\n      //       {'ack': 'client'}\n      //     );\n\n    }, {\n      key: 'nack',\n      value: function nack(messageID, subscription) {\n        var headers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        var hdrs = Object.assign({}, headers); // 1.2 change id header name from message-id to id\n\n        var idAttr = this.version === VERSIONS.V1_2 ? 'id' : 'message-id';\n        hdrs[idAttr] = messageID;\n        hdrs.subscription = subscription;\n\n        this._transmit('NACK', hdrs);\n      } // [SUBSCRIBE Frame](http://stomp.github.com/stomp-specification-1.1.html#SUBSCRIBE)\n\n    }, {\n      key: 'subscribe',\n      value: function subscribe(destination, callback) {\n        var headers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        var hdrs = Object.assign({}, headers); // for convenience if the `id` header is not set, we create a new one for this client\n        // that will be returned to be able to unsubscribe this subscription\n\n        if (!hdrs.id) hdrs.id = 'sub-' + createId();\n        hdrs.destination = destination;\n        this.subscriptions[hdrs.id] = callback;\n\n        this._transmit('SUBSCRIBE', hdrs);\n\n        return {\n          id: hdrs.id,\n          unsubscribe: this.unsubscribe.bind(this, hdrs.id)\n        };\n      } // [UNSUBSCRIBE Frame](http://stomp.github.com/stomp-specification-1.1.html#UNSUBSCRIBE)\n      //\n      // * `id` is MANDATORY.\n      //\n      // It is preferable to unsubscribe from a subscription by calling\n      // `unsubscribe()` directly on the object returned by `client.subscribe()`:\n      //\n      //     var subscription = client.subscribe(destination, onmessage);\n      //     ...\n      //     subscription.unsubscribe(headers);\n\n    }, {\n      key: 'unsubscribe',\n      value: function unsubscribe(id) {\n        var headers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        var hdrs = Object.assign({}, headers);\n        delete this.subscriptions[id];\n        hdrs.id = id;\n\n        this._transmit('UNSUBSCRIBE', hdrs);\n      } // Clean up client resources when it is disconnected or the server did not\n      // send heart beats in a timely fashion\n\n    }, {\n      key: '_cleanUp',\n      value: function _cleanUp() {\n        this.connected = false;\n        clearInterval(this.pinger);\n        clearInterval(this.ponger);\n      } // Base method to transmit any stomp frame\n\n    }, {\n      key: '_transmit',\n      value: function _transmit(command, headers, body) {\n        var out = Frame.marshall(command, headers, body);\n        this.debug('>>> ' + out, {\n          frame: {\n            command: command,\n            headers: headers,\n            body: body\n          }\n        });\n\n        this._wsSend(out);\n      }\n    }, {\n      key: '_wsSend',\n      value: function _wsSend(data) {\n        if (this.isBinary) data = unicodeStringToTypedArray(data);\n        this.debug('>>> length ' + data.length); // if necessary, split the *STOMP* frame to send it on many smaller\n        // *WebSocket* frames\n\n        while (true) {\n          if (data.length > this.maxWebSocketFrameSize) {\n            this.ws.send(data.slice(0, this.maxWebSocketFrameSize));\n            data = data.slice(this.maxWebSocketFrameSize);\n            this.debug('remaining = ' + data.length);\n          } else {\n            return this.ws.send(data);\n          }\n        }\n      } // Heart-beat negotiation\n\n    }, {\n      key: '_setupHeartbeat',\n      value: function _setupHeartbeat(headers) {\n        var _this2 = this;\n\n        if (this.version !== VERSIONS.V1_1 && this.version !== VERSIONS.V1_2) return; // heart-beat header received from the server looks like:\n        //\n        //     heart-beat: sx, sy\n\n        var _split$map = (headers['heart-beat'] || '0,0').split(',').map(function (v) {\n          return parseInt(v, 10);\n        }),\n            _split$map2 = slicedToArray(_split$map, 2),\n            serverOutgoing = _split$map2[0],\n            serverIncoming = _split$map2[1];\n\n        if (!(this.heartbeat.outgoing === 0 || serverIncoming === 0)) {\n          var ttl = Math.max(this.heartbeat.outgoing, serverIncoming);\n          this.debug('send PING every ' + ttl + 'ms');\n          this.pinger = setInterval(function () {\n            _this2._wsSend(BYTES.LF);\n\n            _this2.debug('>>> PING');\n          }, ttl);\n        }\n\n        if (!(this.heartbeat.incoming === 0 || serverOutgoing === 0)) {\n          var _ttl = Math.max(this.heartbeat.incoming, serverOutgoing);\n\n          this.debug('check PONG every ' + _ttl + 'ms');\n          this.ponger = setInterval(function () {\n            var delta = Date.now() - _this2.serverActivity; // We wait twice the TTL to be flexible on window's setInterval calls\n\n\n            if (delta > _ttl * 2) {\n              _this2.debug('did not receive server activity for the last ' + delta + 'ms');\n\n              _this2.ws.close();\n            }\n          }, _ttl);\n        }\n      } // parse the arguments number and type to find the headers, connectCallback and\n      // (eventually undefined) errorCallback\n\n    }, {\n      key: '_parseConnect',\n      value: function _parseConnect() {\n        var headers = {},\n            connectCallback = void 0,\n            errorCallback = void 0;\n\n        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        switch (args.length) {\n          case 2:\n            headers = args[0];\n            connectCallback = args[1];\n            break;\n\n          case 3:\n            if (args[1] instanceof Function) {\n              headers = args[0];\n              connectCallback = args[1];\n              errorCallback = args[2];\n            } else {\n              headers.login = args[0];\n              headers.passcode = args[1];\n              connectCallback = args[2];\n            }\n\n            break;\n\n          case 4:\n            headers.login = args[0];\n            headers.passcode = args[1];\n            connectCallback = args[2];\n            errorCallback = args[3];\n            break;\n\n          default:\n            headers.login = args[0];\n            headers.passcode = args[1];\n            connectCallback = args[2];\n            errorCallback = args[3];\n            headers.host = args[4];\n        }\n\n        return [headers, connectCallback, errorCallback];\n      }\n    }]);\n    return Client;\n  }(); // The `webstomp` Object\n\n\n  var webstomp = {\n    Frame: Frame,\n    VERSIONS: VERSIONS,\n    // This method creates a WebSocket client that is connected to\n    // the STOMP server located at the url.\n    client: function client(url) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var ws = new WebSocket(url, options.protocols || VERSIONS.supportedProtocols());\n      return new Client(ws, options);\n    },\n    // This method is an alternative to `webstomp.client()` to let the user\n    // specify the WebSocket to use (either a standard HTML5 WebSocket or\n    // a similar object).\n    over: function over() {\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return new (Function.prototype.bind.apply(Client, [null].concat(args)))();\n    }\n  };\n  return webstomp;\n});","map":{"version":3,"names":["global","factory","exports","module","define","amd","webstomp","classCallCheck","instance","Constructor","TypeError","createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","slicedToArray","sliceIterator","arr","_arr","_n","_d","_e","undefined","_i","Symbol","iterator","_s","next","done","push","value","err","Array","isArray","toConsumableArray","arr2","from","VERSIONS","V1_0","V1_1","V1_2","supportedVersions","supportedProtocols","PROTOCOLS_VERSIONS","getSupportedVersion","protocol","debug","knownVersion","BYTES","LF","NULL","trim","str","replace","unicodeStringToTypedArray","s","escstr","encodeURIComponent","binstr","match","p1","String","fromCharCode","map","call","c","charCodeAt","Uint8Array","typedArrayToUnicodeString","ua","apply","m","p","code","toString","toUpperCase","decodeURIComponent","sizeOfUTF8","createId","ts","Date","getTime","rand","Math","floor","random","Frame","command","headers","arguments","body","_this","lines","skipContentLength","keys","forEach","name","join","unmarshallSingle","data","divider","search","RegExp","headerLines","substring","split","shift","bodyIndex","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","reverse","_step","line","idx","indexOf","return","len","parseInt","chr","charAt","unmarshall","datas","frames","firstFrames","slice","lastFrame","r","f","partial","marshall","frame","Client","ws","options","_options$binary","binary","_options$heartbeat","heartbeat","outgoing","incoming","_options$debug","_options$protocols","protocols","binaryType","isBinary","hasDebug","connected","maxWebSocketFrameSize","subscriptions","partialData","_console","console","log","connect","_parseConnect2","_parseConnect","_parseConnect3","connectCallback","errorCallback","onmessage","evt","ArrayBuffer","serverActivity","now","unmarshalledData","server","version","_setupHeartbeat","subscription","onreceive","messageID","ack","bind","nack","onreceipt","onclose","event","url","_cleanUp","onopen","_transmit","readyState","OPEN","disconnect","disconnectCallback","close","send","destination","hdrs","assign","begin","transaction","id","commit","abort","idAttr","subscribe","callback","unsubscribe","clearInterval","pinger","ponger","out","_wsSend","_this2","_split$map","v","_split$map2","serverOutgoing","serverIncoming","ttl","max","setInterval","_ttl","delta","_len","args","_key","Function","login","passcode","host","client","WebSocket","over","concat"],"sources":["C:/Users/hp/Desktop/test/frontend-chat/node_modules/webstomp-client/dist/webstomp.js"],"sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  (global.webstomp = factory());\n}(this, (function () { 'use strict';\n\n  var classCallCheck = function (instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  };\n\n  var createClass = function () {\n    function defineProperties(target, props) {\n      for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n      }\n    }\n\n    return function (Constructor, protoProps, staticProps) {\n      if (protoProps) defineProperties(Constructor.prototype, protoProps);\n      if (staticProps) defineProperties(Constructor, staticProps);\n      return Constructor;\n    };\n  }();\n\n  var slicedToArray = function () {\n    function sliceIterator(arr, i) {\n      var _arr = [];\n      var _n = true;\n      var _d = false;\n      var _e = undefined;\n\n      try {\n        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n          _arr.push(_s.value);\n\n          if (i && _arr.length === i) break;\n        }\n      } catch (err) {\n        _d = true;\n        _e = err;\n      } finally {\n        try {\n          if (!_n && _i[\"return\"]) _i[\"return\"]();\n        } finally {\n          if (_d) throw _e;\n        }\n      }\n\n      return _arr;\n    }\n\n    return function (arr, i) {\n      if (Array.isArray(arr)) {\n        return arr;\n      } else if (Symbol.iterator in Object(arr)) {\n        return sliceIterator(arr, i);\n      } else {\n        throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n      }\n    };\n  }();\n\n  var toConsumableArray = function (arr) {\n    if (Array.isArray(arr)) {\n      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n      return arr2;\n    } else {\n      return Array.from(arr);\n    }\n  };\n\n  var VERSIONS = {\n      V1_0: '1.0',\n      V1_1: '1.1',\n      V1_2: '1.2',\n      // Versions of STOMP specifications supported\n      supportedVersions: function supportedVersions() {\n          return '1.2,1.1,1.0';\n      },\n      supportedProtocols: function supportedProtocols() {\n          return ['v10.stomp', 'v11.stomp', 'v12.stomp'];\n      }\n  };\n\n  var PROTOCOLS_VERSIONS = {\n      'v10.stomp': VERSIONS.V1_0,\n      'v11.stomp': VERSIONS.V1_1,\n      'v12.stomp': VERSIONS.V1_2\n  };\n\n  function getSupportedVersion(protocol, debug) {\n      var knownVersion = PROTOCOLS_VERSIONS[protocol];\n      if (!knownVersion && debug) {\n          debug('DEPRECATED: ' + protocol + ' is not a recognized STOMP version. In next major client version, this will close the connection.');\n      }\n      // 2nd temporary fallback if the protocol\n      // does not match a supported STOMP version\n      // This fallback will be removed in next major version\n      return knownVersion || VERSIONS.V1_2;\n  }\n\n  // Define constants for bytes used throughout the code.\n  var BYTES = {\n      // LINEFEED byte (octet 10)\n      LF: '\\x0A',\n      // NULL byte (octet 0)\n      NULL: '\\x00'\n  };\n\n  // utility function to trim any whitespace before and after a string\n  var trim = function trim(str) {\n      return str.replace(/^\\s+|\\s+$/g, '');\n  };\n\n  // from https://coolaj86.com/articles/unicode-string-to-a-utf-8-typed-array-buffer-in-javascript/\n  function unicodeStringToTypedArray(s) {\n      var escstr = encodeURIComponent(s);\n      var binstr = escstr.replace(/%([0-9A-F]{2})/g, function (match, p1) {\n          return String.fromCharCode('0x' + p1);\n      });\n      var arr = Array.prototype.map.call(binstr, function (c) {\n          return c.charCodeAt(0);\n      });\n      return new Uint8Array(arr);\n  }\n\n  // from https://coolaj86.com/articles/unicode-string-to-a-utf-8-typed-array-buffer-in-javascript/\n  function typedArrayToUnicodeString(ua) {\n      var binstr = String.fromCharCode.apply(String, toConsumableArray(ua));\n      var escstr = binstr.replace(/(.)/g, function (m, p) {\n          var code = p.charCodeAt(0).toString(16).toUpperCase();\n          if (code.length < 2) {\n              code = '0' + code;\n          }\n          return '%' + code;\n      });\n      return decodeURIComponent(escstr);\n  }\n\n  // Compute the size of a UTF-8 string by counting its number of bytes\n  // (and not the number of characters composing the string)\n  function sizeOfUTF8(s) {\n      if (!s) return 0;\n      return encodeURIComponent(s).match(/%..|./g).length;\n  }\n\n  function createId() {\n      var ts = new Date().getTime();\n      var rand = Math.floor(Math.random() * 1000);\n      return ts + '-' + rand;\n  }\n\n  // [STOMP Frame](http://stomp.github.com/stomp-specification-1.1.html#STOMP_Frames) Class\n\n  var Frame = function () {\n\n      // Frame constructor\n      function Frame(command) {\n          var headers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n          var body = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n          classCallCheck(this, Frame);\n\n          this.command = command;\n          this.headers = headers;\n          this.body = body;\n      }\n\n      // Provides a textual representation of the frame\n      // suitable to be sent to the server\n\n\n      createClass(Frame, [{\n          key: 'toString',\n          value: function toString() {\n              var _this = this;\n\n              var lines = [this.command],\n                  skipContentLength = this.headers['content-length'] === false;\n              if (skipContentLength) delete this.headers['content-length'];\n\n              Object.keys(this.headers).forEach(function (name) {\n                  var value = _this.headers[name];\n                  lines.push(name + ':' + value);\n              });\n\n              if (this.body && !skipContentLength) {\n                  lines.push('content-length:' + sizeOfUTF8(this.body));\n              }\n\n              lines.push(BYTES.LF + this.body);\n\n              return lines.join(BYTES.LF);\n          }\n\n          // Unmarshall a single STOMP frame from a `data` string\n\n      }], [{\n          key: 'unmarshallSingle',\n          value: function unmarshallSingle(data) {\n              // search for 2 consecutives LF byte to split the command\n              // and headers from the body\n              var divider = data.search(new RegExp(BYTES.LF + BYTES.LF)),\n                  headerLines = data.substring(0, divider).split(BYTES.LF),\n                  command = headerLines.shift(),\n                  headers = {},\n                  body = '',\n\n              // skip the 2 LF bytes that divides the headers from the body\n              bodyIndex = divider + 2;\n\n              // Parse headers in reverse order so that for repeated headers, the 1st\n              // value is used\n              var _iteratorNormalCompletion = true;\n              var _didIteratorError = false;\n              var _iteratorError = undefined;\n\n              try {\n                  for (var _iterator = headerLines.reverse()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                      var line = _step.value;\n\n                      var idx = line.indexOf(':');\n                      headers[trim(line.substring(0, idx))] = trim(line.substring(idx + 1));\n                  }\n                  // Parse body\n                  // check for content-length or topping at the first NULL byte found.\n              } catch (err) {\n                  _didIteratorError = true;\n                  _iteratorError = err;\n              } finally {\n                  try {\n                      if (!_iteratorNormalCompletion && _iterator.return) {\n                          _iterator.return();\n                      }\n                  } finally {\n                      if (_didIteratorError) {\n                          throw _iteratorError;\n                      }\n                  }\n              }\n\n              if (headers['content-length']) {\n                  var len = parseInt(headers['content-length'], 10);\n                  body = ('' + data).substring(bodyIndex, bodyIndex + len);\n              } else {\n                  var chr = null;\n                  for (var i = bodyIndex; i < data.length; i++) {\n                      chr = data.charAt(i);\n                      if (chr === BYTES.NULL) break;\n                      body += chr;\n                  }\n              }\n\n              return new Frame(command, headers, body);\n          }\n\n          // Split the data before unmarshalling every single STOMP frame.\n          // Web socket servers can send multiple frames in a single websocket message.\n          // If the message size exceeds the websocket message size, then a single\n          // frame can be fragmented across multiple messages.\n          //\n          // `datas` is a string.\n          //\n          // returns an *array* of Frame objects\n\n      }, {\n          key: 'unmarshall',\n          value: function unmarshall(datas) {\n              // split and unmarshall *multiple STOMP frames* contained in a *single WebSocket frame*.\n              // The data is split when a NULL byte (followed by zero or many LF bytes) is found\n              var frames = datas.split(new RegExp(BYTES.NULL + BYTES.LF + '*')),\n                  firstFrames = frames.slice(0, -1),\n                  lastFrame = frames.slice(-1)[0],\n                  r = {\n                  frames: firstFrames.map(function (f) {\n                      return Frame.unmarshallSingle(f);\n                  }),\n                  partial: ''\n              };\n\n              // If this contains a final full message or just a acknowledgement of a PING\n              // without any other content, process this frame, otherwise return the\n              // contents of the buffer to the caller.\n              if (lastFrame === BYTES.LF || lastFrame.search(RegExp(BYTES.NULL + BYTES.LF + '*$')) !== -1) {\n                  r.frames.push(Frame.unmarshallSingle(lastFrame));\n              } else {\n                  r.partial = lastFrame;\n              }\n\n              return r;\n          }\n\n          // Marshall a Stomp frame\n\n      }, {\n          key: 'marshall',\n          value: function marshall(command, headers, body) {\n              var frame = new Frame(command, headers, body);\n              return frame.toString() + BYTES.NULL;\n          }\n      }]);\n      return Frame;\n  }();\n\n  // STOMP Client Class\n  //\n  // All STOMP protocol is exposed as methods of this class (`connect()`,\n  // `send()`, etc.)\n\n  var Client = function () {\n      function Client(ws) {\n          var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n          classCallCheck(this, Client);\n\n          // cannot have default options object + destructuring in the same time in method signature\n          var _options$binary = options.binary,\n              binary = _options$binary === undefined ? false : _options$binary,\n              _options$heartbeat = options.heartbeat,\n              heartbeat = _options$heartbeat === undefined ? { outgoing: 10000, incoming: 10000 } : _options$heartbeat,\n              _options$debug = options.debug,\n              debug = _options$debug === undefined ? true : _options$debug,\n              _options$protocols = options.protocols,\n              protocols = _options$protocols === undefined ? [] : _options$protocols;\n\n\n          this.ws = ws;\n          this.ws.binaryType = 'arraybuffer';\n          this.isBinary = !!binary;\n          this.hasDebug = !!debug;\n          this.connected = false;\n          // Heartbeat properties of the client\n          // outgoing: send heartbeat every 10s by default (value is in ms)\n          // incoming: expect to receive server heartbeat at least every 10s by default\n          // falsy value means no heartbeat hence 0,0\n          this.heartbeat = heartbeat || { outgoing: 0, incoming: 0 };\n          // maximum *WebSocket* frame size sent by the client. If the STOMP frame\n          // is bigger than this value, the STOMP frame will be sent using multiple\n          // WebSocket frames (default is 16KiB)\n          this.maxWebSocketFrameSize = 16 * 1024;\n          // subscription callbacks indexed by subscriber's ID\n          this.subscriptions = {};\n          this.partialData = '';\n          this.protocols = protocols;\n      }\n\n      // //// Debugging\n      //\n      // By default, debug messages are logged in the window's console if it is defined.\n      // This method is called for every actual transmission of the STOMP frames over the\n      // WebSocket.\n      //\n      // It is possible to set a `debug(message, data)` method\n      // on a client instance to handle differently the debug messages:\n      //\n      //     client.debug = function(str) {\n      //         // append the debug log to a #debug div\n      //         $(\"#debug\").append(str + \"\\n\");\n      //     };\n\n\n      createClass(Client, [{\n          key: 'debug',\n          value: function debug() {\n              var _console;\n\n              if (this.hasDebug) (_console = console).log.apply(_console, arguments);\n          }\n\n          // [CONNECT Frame](http://stomp.github.com/stomp-specification-1.1.html#CONNECT_or_STOMP_Frame)\n          //\n          // The `connect` method accepts different number of arguments and types:\n          //\n          // * `connect(headers, connectCallback)`\n          // * `connect(headers, connectCallback, errorCallback)`\n          // * `connect(login, passcode, connectCallback)`\n          // * `connect(login, passcode, connectCallback, errorCallback)`\n          // * `connect(login, passcode, connectCallback, errorCallback, host)`\n          //\n          // The errorCallback is optional and the 2 first forms allow to pass other\n          // headers in addition to `client`, `passcode` and `host`.\n\n      }, {\n          key: 'connect',\n          value: function connect() {\n              var _this = this;\n\n              var _parseConnect2 = this._parseConnect.apply(this, arguments),\n                  _parseConnect3 = slicedToArray(_parseConnect2, 3),\n                  headers = _parseConnect3[0],\n                  connectCallback = _parseConnect3[1],\n                  errorCallback = _parseConnect3[2];\n\n              this.connectCallback = connectCallback;\n              this.debug('Opening Web Socket...');\n              this.ws.onmessage = function (evt) {\n                  var data = evt.data;\n                  if (evt.data instanceof ArrayBuffer) {\n                      data = typedArrayToUnicodeString(new Uint8Array(evt.data));\n                  }\n                  _this.serverActivity = Date.now();\n                  // heartbeat\n                  if (data === BYTES.LF) {\n                      _this.debug('<<< PONG');\n                      return;\n                  }\n                  _this.debug('<<< ' + data);\n                  // Handle STOMP frames received from the server\n                  // The unmarshall function returns the frames parsed and any remaining\n                  // data from partial frames.\n                  var unmarshalledData = Frame.unmarshall(_this.partialData + data);\n                  _this.partialData = unmarshalledData.partial;\n                  unmarshalledData.frames.forEach(function (frame) {\n                      switch (frame.command) {\n                          // [CONNECTED Frame](http://stomp.github.com/stomp-specification-1.1.html#CONNECTED_Frame)\n                          case 'CONNECTED':\n                              _this.debug('connected to server ' + frame.headers.server);\n                              _this.connected = true;\n                              _this.version = frame.headers.version;\n                              _this._setupHeartbeat(frame.headers);\n                              if (connectCallback) connectCallback(frame);\n                              break;\n                          // [MESSAGE Frame](http://stomp.github.com/stomp-specification-1.1.html#MESSAGE)\n                          case 'MESSAGE':\n                              // the `onreceive` callback is registered when the client calls\n                              // `subscribe()`.\n                              // If there is registered subscription for the received message,\n                              // we used the default `onreceive` method that the client can set.\n                              // This is useful for subscriptions that are automatically created\n                              // on the browser side (e.g. [RabbitMQ's temporary\n                              // queues](http://www.rabbitmq.com/stomp.html)).\n                              var subscription = frame.headers.subscription;\n                              var onreceive = _this.subscriptions[subscription] || _this.onreceive;\n                              if (onreceive) {\n                                  // 1.2 define ack header if ack is set to client\n                                  // and this header must be used for ack/nack\n                                  var messageID = _this.version === VERSIONS.V1_2 && frame.headers.ack || frame.headers['message-id'];\n                                  // add `ack()` and `nack()` methods directly to the returned frame\n                                  // so that a simple call to `message.ack()` can acknowledge the message.\n                                  frame.ack = _this.ack.bind(_this, messageID, subscription);\n                                  frame.nack = _this.nack.bind(_this, messageID, subscription);\n                                  onreceive(frame);\n                              } else {\n                                  _this.debug('Unhandled received MESSAGE: ' + frame);\n                              }\n                              break;\n                          // [RECEIPT Frame](http://stomp.github.com/stomp-specification-1.1.html#RECEIPT)\n                          //\n                          // The client instance can set its `onreceipt` field to a function taking\n                          // a frame argument that will be called when a receipt is received from\n                          // the server:\n                          //\n                          //     client.onreceipt = function(frame) {\n                          //       receiptID = frame.headers['receipt-id'];\n                          //       ...\n                          //     }\n                          case 'RECEIPT':\n                              if (_this.onreceipt) _this.onreceipt(frame);\n                              break;\n                          // [ERROR Frame](http://stomp.github.com/stomp-specification-1.1.html#ERROR)\n                          case 'ERROR':\n                              if (errorCallback) errorCallback(frame);\n                              break;\n                          default:\n                              _this.debug('Unhandled frame: ' + frame);\n                      }\n                  });\n              };\n              this.ws.onclose = function (event) {\n                  _this.debug('Whoops! Lost connection to ' + _this.ws.url + ':', { event: event });\n                  _this._cleanUp();\n                  if (errorCallback) errorCallback(event);\n              };\n              this.ws.onopen = function () {\n                  _this.debug('Web Socket Opened...');\n                  // 1st protocol fallback on user 1st protocols options\n                  // to prevent edge case where server does not comply and respond with a choosen protocol\n                  // or when ws client does not handle protocol property very well\n                  headers['accept-version'] = getSupportedVersion(_this.ws.protocol || _this.protocols[0], _this.debug.bind(_this));\n                  // Check if we already have heart-beat in headers before adding them\n                  if (!headers['heart-beat']) {\n                      headers['heart-beat'] = [_this.heartbeat.outgoing, _this.heartbeat.incoming].join(',');\n                  }\n                  _this._transmit('CONNECT', headers);\n              };\n              if (this.ws.readyState === this.ws.OPEN) {\n                  this.ws.onopen();\n              }\n          }\n\n          // [DISCONNECT Frame](http://stomp.github.com/stomp-specification-1.1.html#DISCONNECT)\n\n      }, {\n          key: 'disconnect',\n          value: function disconnect(disconnectCallback) {\n              var headers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n              this._transmit('DISCONNECT', headers);\n              // Discard the onclose callback to avoid calling the errorCallback when\n              // the client is properly disconnected.\n              this.ws.onclose = null;\n              this.ws.close();\n              this._cleanUp();\n              // TODO: what's the point of this callback disconnect is not async\n              if (disconnectCallback) disconnectCallback();\n          }\n\n          // [SEND Frame](http://stomp.github.com/stomp-specification-1.1.html#SEND)\n          //\n          // * `destination` is MANDATORY.\n\n      }, {\n          key: 'send',\n          value: function send(destination) {\n              var body = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n              var headers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n              var hdrs = Object.assign({}, headers);\n              hdrs.destination = destination;\n              this._transmit('SEND', hdrs, body);\n          }\n\n          // [BEGIN Frame](http://stomp.github.com/stomp-specification-1.1.html#BEGIN)\n          //\n          // If no transaction ID is passed, one will be created automatically\n\n      }, {\n          key: 'begin',\n          value: function begin() {\n              var transaction = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'tx-' + createId();\n\n              this._transmit('BEGIN', { transaction: transaction });\n              return {\n                  id: transaction,\n                  commit: this.commit.bind(this, transaction),\n                  abort: this.abort.bind(this, transaction)\n              };\n          }\n\n          // [COMMIT Frame](http://stomp.github.com/stomp-specification-1.1.html#COMMIT)\n          //\n          // * `transaction` is MANDATORY.\n          //\n          // It is preferable to commit a transaction by calling `commit()` directly on\n          // the object returned by `client.begin()`:\n          //\n          //     var tx = client.begin(txid);\n          //     ...\n          //     tx.commit();\n\n      }, {\n          key: 'commit',\n          value: function commit(transaction) {\n              this._transmit('COMMIT', { transaction: transaction });\n          }\n\n          // [ABORT Frame](http://stomp.github.com/stomp-specification-1.1.html#ABORT)\n          //\n          // * `transaction` is MANDATORY.\n          //\n          // It is preferable to abort a transaction by calling `abort()` directly on\n          // the object returned by `client.begin()`:\n          //\n          //     var tx = client.begin(txid);\n          //     ...\n          //     tx.abort();\n\n      }, {\n          key: 'abort',\n          value: function abort(transaction) {\n              this._transmit('ABORT', { transaction: transaction });\n          }\n\n          // [ACK Frame](http://stomp.github.com/stomp-specification-1.1.html#ACK)\n          //\n          // * `messageID` & `subscription` are MANDATORY.\n          //\n          // It is preferable to acknowledge a message by calling `ack()` directly\n          // on the message handled by a subscription callback:\n          //\n          //     client.subscribe(destination,\n          //       function(message) {\n          //         // process the message\n          //         // acknowledge it\n          //         message.ack();\n          //       },\n          //       {'ack': 'client'}\n          //     );\n\n      }, {\n          key: 'ack',\n          value: function ack(messageID, subscription) {\n              var headers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n              var hdrs = Object.assign({}, headers);\n              // 1.2 change id header name from message-id to id\n              var idAttr = this.version === VERSIONS.V1_2 ? 'id' : 'message-id';\n              hdrs[idAttr] = messageID;\n              hdrs.subscription = subscription;\n              this._transmit('ACK', hdrs);\n          }\n\n          // [NACK Frame](http://stomp.github.com/stomp-specification-1.1.html#NACK)\n          //\n          // * `messageID` & `subscription` are MANDATORY.\n          //\n          // It is preferable to nack a message by calling `nack()` directly on the\n          // message handled by a subscription callback:\n          //\n          //     client.subscribe(destination,\n          //       function(message) {\n          //         // process the message\n          //         // an error occurs, nack it\n          //         message.nack();\n          //       },\n          //       {'ack': 'client'}\n          //     );\n\n      }, {\n          key: 'nack',\n          value: function nack(messageID, subscription) {\n              var headers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n              var hdrs = Object.assign({}, headers);\n              // 1.2 change id header name from message-id to id\n              var idAttr = this.version === VERSIONS.V1_2 ? 'id' : 'message-id';\n              hdrs[idAttr] = messageID;\n              hdrs.subscription = subscription;\n              this._transmit('NACK', hdrs);\n          }\n\n          // [SUBSCRIBE Frame](http://stomp.github.com/stomp-specification-1.1.html#SUBSCRIBE)\n\n      }, {\n          key: 'subscribe',\n          value: function subscribe(destination, callback) {\n              var headers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n              var hdrs = Object.assign({}, headers);\n              // for convenience if the `id` header is not set, we create a new one for this client\n              // that will be returned to be able to unsubscribe this subscription\n              if (!hdrs.id) hdrs.id = 'sub-' + createId();\n              hdrs.destination = destination;\n              this.subscriptions[hdrs.id] = callback;\n              this._transmit('SUBSCRIBE', hdrs);\n              return {\n                  id: hdrs.id,\n                  unsubscribe: this.unsubscribe.bind(this, hdrs.id)\n              };\n          }\n\n          // [UNSUBSCRIBE Frame](http://stomp.github.com/stomp-specification-1.1.html#UNSUBSCRIBE)\n          //\n          // * `id` is MANDATORY.\n          //\n          // It is preferable to unsubscribe from a subscription by calling\n          // `unsubscribe()` directly on the object returned by `client.subscribe()`:\n          //\n          //     var subscription = client.subscribe(destination, onmessage);\n          //     ...\n          //     subscription.unsubscribe(headers);\n\n      }, {\n          key: 'unsubscribe',\n          value: function unsubscribe(id) {\n              var headers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n              var hdrs = Object.assign({}, headers);\n              delete this.subscriptions[id];\n              hdrs.id = id;\n              this._transmit('UNSUBSCRIBE', hdrs);\n          }\n\n          // Clean up client resources when it is disconnected or the server did not\n          // send heart beats in a timely fashion\n\n      }, {\n          key: '_cleanUp',\n          value: function _cleanUp() {\n              this.connected = false;\n              clearInterval(this.pinger);\n              clearInterval(this.ponger);\n          }\n\n          // Base method to transmit any stomp frame\n\n      }, {\n          key: '_transmit',\n          value: function _transmit(command, headers, body) {\n              var out = Frame.marshall(command, headers, body);\n              this.debug('>>> ' + out, { frame: { command: command, headers: headers, body: body } });\n              this._wsSend(out);\n          }\n      }, {\n          key: '_wsSend',\n          value: function _wsSend(data) {\n              if (this.isBinary) data = unicodeStringToTypedArray(data);\n              this.debug('>>> length ' + data.length);\n              // if necessary, split the *STOMP* frame to send it on many smaller\n              // *WebSocket* frames\n              while (true) {\n                  if (data.length > this.maxWebSocketFrameSize) {\n                      this.ws.send(data.slice(0, this.maxWebSocketFrameSize));\n                      data = data.slice(this.maxWebSocketFrameSize);\n                      this.debug('remaining = ' + data.length);\n                  } else {\n                      return this.ws.send(data);\n                  }\n              }\n          }\n\n          // Heart-beat negotiation\n\n      }, {\n          key: '_setupHeartbeat',\n          value: function _setupHeartbeat(headers) {\n              var _this2 = this;\n\n              if (this.version !== VERSIONS.V1_1 && this.version !== VERSIONS.V1_2) return;\n\n              // heart-beat header received from the server looks like:\n              //\n              //     heart-beat: sx, sy\n\n              var _split$map = (headers['heart-beat'] || '0,0').split(',').map(function (v) {\n                  return parseInt(v, 10);\n              }),\n                  _split$map2 = slicedToArray(_split$map, 2),\n                  serverOutgoing = _split$map2[0],\n                  serverIncoming = _split$map2[1];\n\n              if (!(this.heartbeat.outgoing === 0 || serverIncoming === 0)) {\n                  var ttl = Math.max(this.heartbeat.outgoing, serverIncoming);\n                  this.debug('send PING every ' + ttl + 'ms');\n                  this.pinger = setInterval(function () {\n                      _this2._wsSend(BYTES.LF);\n                      _this2.debug('>>> PING');\n                  }, ttl);\n              }\n\n              if (!(this.heartbeat.incoming === 0 || serverOutgoing === 0)) {\n                  var _ttl = Math.max(this.heartbeat.incoming, serverOutgoing);\n                  this.debug('check PONG every ' + _ttl + 'ms');\n                  this.ponger = setInterval(function () {\n                      var delta = Date.now() - _this2.serverActivity;\n                      // We wait twice the TTL to be flexible on window's setInterval calls\n                      if (delta > _ttl * 2) {\n                          _this2.debug('did not receive server activity for the last ' + delta + 'ms');\n                          _this2.ws.close();\n                      }\n                  }, _ttl);\n              }\n          }\n\n          // parse the arguments number and type to find the headers, connectCallback and\n          // (eventually undefined) errorCallback\n\n      }, {\n          key: '_parseConnect',\n          value: function _parseConnect() {\n              var headers = {},\n                  connectCallback = void 0,\n                  errorCallback = void 0;\n\n              for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n                  args[_key] = arguments[_key];\n              }\n\n              switch (args.length) {\n                  case 2:\n                      headers = args[0];\n                      connectCallback = args[1];\n\n                      break;\n                  case 3:\n                      if (args[1] instanceof Function) {\n                          headers = args[0];\n                          connectCallback = args[1];\n                          errorCallback = args[2];\n                      } else {\n                          headers.login = args[0];\n                          headers.passcode = args[1];\n                          connectCallback = args[2];\n                      }\n                      break;\n                  case 4:\n                      headers.login = args[0];\n                      headers.passcode = args[1];\n                      connectCallback = args[2];\n                      errorCallback = args[3];\n\n                      break;\n                  default:\n                      headers.login = args[0];\n                      headers.passcode = args[1];\n                      connectCallback = args[2];\n                      errorCallback = args[3];\n                      headers.host = args[4];\n\n              }\n\n              return [headers, connectCallback, errorCallback];\n          }\n      }]);\n      return Client;\n  }();\n\n  // The `webstomp` Object\n  var webstomp = {\n      Frame: Frame,\n      VERSIONS: VERSIONS,\n      // This method creates a WebSocket client that is connected to\n      // the STOMP server located at the url.\n      client: function client(url) {\n          var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n          var ws = new WebSocket(url, options.protocols || VERSIONS.supportedProtocols());\n          return new Client(ws, options);\n      },\n\n      // This method is an alternative to `webstomp.client()` to let the user\n      // specify the WebSocket to use (either a standard HTML5 WebSocket or\n      // a similar object).\n      over: function over() {\n          for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n              args[_key] = arguments[_key];\n          }\n\n          return new (Function.prototype.bind.apply(Client, [null].concat(args)))();\n      }\n  };\n\n  return webstomp;\n\n})));\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}